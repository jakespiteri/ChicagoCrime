% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_data.R
\name{joinLonLat}
\alias{joinLonLat}
\title{Join by Longitude/Latitude}
\usage{
joinLonLat(x, y, f = NULL, lonname = "Longitude", latname = "Latitude",
  outname = "distance", inc_lonlat = TRUE, verbose = TRUE)
}
\arguments{
\item{x}{data frame to be appended to; should be the larger of \code{x} and \code{y}}

\item{y}{data frame to join onto \code{x}}

\item{f}{function to define what column is added to \code{x}, see 'Details' and 'Examples'}

\item{lonname}{name of the longitude column shared by both data frames}

\item{latname}{name of the latitude column shared by both data frames}

\item{outname}{name of the column added to \code{x} by \code{f}}

\item{inc_lonlat}{logical; if \code{TRUE}, longitude and latitude co-ordinates from \code{y} will be added to \code{x}}

\item{verbose}{logical; if \code{TRUE}, progress bars will be displayed as data sets are joining}
}
\value{
the original data frame \code{x}, with one appended column defined by \code{f}, and the longitudes/latitudes if \code{inc_lonlats=TRUE}.
%>%
}
\description{
Append one data frame to another by nearest longitude and latitude
}
\details{
This function first finds the distance between two sets of co-ordinates, for each data frame, using the
haversine distance function (from the \code{geosphere} package),
\deqn{
 d = 2 r arcsin( \sqrt{ sin^2 ( (\theta_2 - \theta_1) / 2 ) + cos (\theta_1) cos(\theta_2) sin^2( (\phi_2 - \phi_1)/2 ) } ),
}
where \eqn{(\phi_1, \theta_1)} is the longitude and latitude of point 1, and \eqn{(\phi_2, \theta_2)}
is the longitude and latitude of point 2, both in radians, and \eqn{r} is the radius of the Earth (6378137m).
Once the distances are found, the smallest distances are calculated and those rows in the data frame \code{y}
that are closest to each row in \code{x} are appended

The function \code{f} decides what column will be appended to the original data frame \code{x}, it takes two arguments
(but both do not need to be used), where the first argument uses data frame \code{x}, and the second uses \code{y}.
}
\examples{
coords1 = data.frame("Longitude" = c(-20, -25, -23, -40),
                     "Latitude" = c(10, 15, 23, 13))
coords2 = data.frame("Longitude" = c(-17, -15, -26),
                "Latitude"= c(11, 31, 42),
                "Names" = c("Frasier", "Niles", "Martin"))
joinLonLat(coords1, coords2, f = function(z1, z2) z2$Names, outname="Closest_Names")

}
